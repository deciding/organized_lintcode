LFU http://bookshadow.com/weblog/2016/11/22/leetcode-lfu-cache/ valueMap, nodeMap, double linked increasing freq node, linkedhashset keys with same freq
LRU nodeMap, double linked value node
catalan number: 2nCn/(n+1) C: 1*n/2*(n-1)/3....
Tower of Hanoi: odd even, format {} ABC, recursion, reverse
anagrams: calc hash of string
first unique char in string: hashmap -> charArr
segment tree, fenwick tree? 4n?
clone binary tree, binary tree sum -> path, bst -> double list
reorder arr -> largest number: prove as bubble sort
Triangle Count: how many combination of arr can form triangle, 3sum
Longest Substring with At Most K Distinct Characters: window
maximum gap: bin
priorityqueue(initsize,comparator)
generate parenthesis: just care about the l r diff
number of islands ii: new land cell as stream, use UF
**O(logn) bst successor: https://www.jiuzhang.com/solution/inorder-successor-in-bst/, set successor as root when go left until val found;right null-> successor;right nonnull, right->left...end
listnode swap pairs: recursion
find k closest elem in sorted arr: last smaller bs + left/right pointer
find k most freq word in arr: hashmap node, pq node with size k. another way https://www.geeksforgeeks.org/find-the-k-most-frequent-words-from-a-file/
merge k sorted arr: 1. binary merge 2. heap with all first elem inserted first
wiggle sort <=: just swap(easy actually), wiggle sort ii <: partition and find median(use absolute index), reverse arr(two pointer)
decodes way of int to ascii: if only need limited prev, no need arr. 4 cases 1.>2 0, return, 2. 0 cur=pp, 3. 1,2 <7 cur=p+pp, 4. cur=p
perfect squares: n*k but mem[n], with pruned k. xxxxx should think as 1d mem, but exaust all the square cases

paint fence: 2 cases
paint house: 3 colors, n*3; k colors, n*k, left right min 
robber ii circle(search 2 run), robber iii tree(use global, 4 mem ll/lr/rl/rr)
trapping rain: proof, visited, pq start from lowest surround, adj if smaller will get the h, assign new height, offer all adj
patching arr: proof, if num smaller than miss, miss + num will get new miss
move 0s to end: partition, no need swap, assign 0s at last
top k: k heap, quick select(partition)
zigzag iterator: i,j compare, if finished one arr, assign max to i/j
intersection of two arr: sort, merge
top k freq: kheap+map with (val,key) order
top k freq: no stream-> kheap+hashmap, stream(add()+topk()) -> double list + hashmap, freq node contains keys(linkedhashset) | treeset with cmp refer to hashmap (this form a value treemap) | not treemap(keyset is also orderedset, iterator)
linkedhashset as LRU:add remove iterator.next
LinkedHashSet use LinkedHashMap implemented by hashmap+double linked list
bomb enemy: W E 0, 4 accumulate matrix
bloom filter: multiple hash func, bits arr save tf/count
combination sum iv: num[] can be repeated, thus it cannot form a state
find the missing number ii: all numbers in str, dp not going to be useful, although we get non-tree graph, we need exact graph, not just a value of some state(but suffix may recompute, can separate by space and hash)
expression expansion 3[2[ad]3[pf]]xyz: stack, ] pop, number accumulate, reverse, stringbuilder
merge k sorted interval: 1. d&c, 2. heap https://www.jiuzhang.com/solution/merge-k-sorted-interval-lists/
merge intervals: keep start and end, read next 1. if i.start<=end, update end 2. else add (start,end), update start,end
word break ii, print but critical time limit: http://www.cnblogs.com/yuzhangcmu/p/4037299.html(suffix may recompute, can separate by space and hash, also can use boolean[] canbreak, but same as judge hashed string size)(also can precalculate canbreak boolean arr)
partition equal subset sum: since we know total sum <=60000, we can use dp on sum/2*n
strstrii: kmp
Smallest Rectangle Enclosing Black Pixels: we already know one pixel in black area, no need dfs to find bound, just use bs + range check (bs+bs will not work, since after mid, you may not in the black area)
bs can be used for 1111000000 pattern(not 011110000)
russian doll: sort->LIS, if same width cannot nested, reverse height order of same width
chuanzhitiao: 3 dim,same phase, weight deduction, 4->3 dim
1100010011011: remove adjacent(zuma), 2times, 3times
non overlap AB BA coexist(two side)
Largest Divisible Subset: max len, max len prev ind, max all len ind :https://www.geeksforgeeks.org/largest-divisible-subset-array/
sequence reconstruction: 1. adjmat(careful dup edge), indegree decrease 2. edge no violate, edge contains all http://www.cnblogs.com/grandyang/p/6032498.html
Two Sum III - Data structure design: O(1) add, O(n) find, careful repeat val
Binary Tree Longest Consecutive Sequence II: global,left,right: http://www.cnblogs.com/grandyang/p/6864398.html method1
course schedule: test cycle: indegree(queue 0 indegree)/(revertvisited+conflict) http://www.cnblogs.com/grandyang/p/4484571.html
course schedule ii : use indegree and record 
Maximum Average Subarray IIï¼š cannot think of O(N), use bs, max~min, use (accumulate sum - k*est mean) , record lowest acc sum, once (acc_sum_mean_diff>lowest_sum_mean_diff) we checked est_mean<=ans https://www.jiuzhang.com/solutions/maximum-average-subarray/
Maximum Subarray V: [1,-1,2,-1,1,-1,-1,-1,5], 3,7 use old O(N) method will not work. use ordered deque(used for limited min) https://github.com/jiadaizhao/LintCode/blob/master/0621-Maximum%20Subarray%20V/0621-Maximum%20Subarray%20V.cpp
frog jump: brute force+bs, dp(n*step)+reverse n map, dp improve: unorderedmap*unorderedset + forward btmup https://github.com/jiadaizhao/LintCode/blob/master/0622-Frog%20Jump/0622-Frog%20Jump.cpp
find missing pos without extra space: A[i]!=i+1, A[i]>=1 <=n, A[i]!=A[A[i]-1]
find duplicate: 1~n, but n+1 slots, A[0] will not be pointed, there must be a cycle with one node that with 2 parent, slow/fast (can also use A[i]!=A[A[i]-1] to check)
word square: way to check: 1.noraml: for every word, m[i][j] check m[j][i]; 2.hashmap: we get i length prefix from vertical, use map to get corresponding words and fill the row(we can fill the matrix to remain only a smaller square every time, and every time fill the colum, we can check the i+1~n rows about the prefix); 3.trie contains all words with cur prefix: we get i length prefix from vertical, use map to get corresponding words and fill the row http://www.cnblogs.com/grandyang/p/6006000.html
132 pattern: forward order, we need to see whether 2 is in 1,3 range, backward order, we just need to check 1<2. use stack to record, and pop all 2s and find the largest 2. https://github.com/jiadaizhao/LintCode/blob/master/0636-132%20Pattern/0636-132%20Pattern.cpp
string abreviation w2d, string homorphism
word abbreviation: w2d, wo1d is not good, int3l is conflict. loop through the word and add abbr; if dup, increase prefix by 1(we can use trie actually, use w2d as key to store tries and go through the word)https://github.com/jiadaizhao/LintCode/blob/master/0639-Word%20Abbreviation/0639-Word%20Abbreviation.cpp
one edit distance: 3 cases
system longest file path: longest file path str length: use map(depth->len), use \t get depth, if file record max, if dir, put map(can use stack, keep cur depth, stack of len, and check file)
tree vertical order: map(root offset->val), doubly linked list is better than treemap
Expression Add Operators: +-* a string get target, be careful about multiple operator(DP can be used for pruning)
Sparse Matrix Multiplication: 1st record cols non-zero index, 2nd, A[i][j]!=0-> res[i][k]+=A[i][j]*B[j][k] k is from cols
bigint sum, mul: mul: product[m+n], p1=i+j, p2=i+j+1
Insert Delete GetRandom O(1): since we access randomly, we no longer need the array order: map(val->index), arr, every time delete, we pop arr, remove target in map, change arr[map[target]] to poped val, change map[val] to map[target]
Convert BST to Greater Tree: node->sum of gte numbers: right first inorder, sum
Walls and Gates: 0 gate, -1 wall, INF empty, find 0 and bfs, all 0s can go at the same time
Counting Bits:Given num = 5 you should return [0,1,1,2,1,2], dp[i] = dp[i & (i - 1)] + 1; 2 cases: get carry/ no carry
Range Sum Query 2D - Immutable: sum[x2,y2]-sum[x1,y2]-sum[x2,y1]+sum[x1,y2]
Guess Number Higher or Lower II: game theory minimax, although not zero sum, but we assume someone will always let us lose more. we want minimax k in [i,j], the dp traverse order is i:2~n, j:i-1~1, it's still "7" shaped dp
Longest Palindromic Subsequence: need 3 direction, lpsubstr need only 1 direction
Ones and Zeroes: backpack with m*n *num, be careful go from largest
Coin Change: since coins are repeatable, it is not a state, only total amount is state
Predict the Winner: game theory, take the coin from either end. since we know can only take one coin a time, we can just record n, n-2, n-4... cases. and case can be different for n is odd/even. len * range start as first method, i*j as second method, both need 2 loop.
Rotate Words: check unique in dict. method1: record all rotate for each word, +1 when encounter new. method2: only record lowest permutation
Decode Ways II: 1~26, *=1~9, make sure think of all cases, *n,n*,**
Number of Big Islands: bigger islands, bfs is better to count, dfs also can, just add up when traceback
KMP: next[] is longest-same-suffix-prefix(true subset) LENGTH(thus already +1) right shift 1 and prepend -1(when searching, i++;j++ will make it 0). to get next[], use dp and recursion next[j+1]=next[j]+1, or j=next[j] until j=-1(i++;j++ will make it 0 length)
Shortest Palindrome: shortest prepends, str+"*"+rev, use kmp
Unique Paths III: unique VALUE paths, use dp with set, since set will be empty by default, it's not useful to use n+1 dp size. we can initialize first row and first col.
First Missing Prime Number: all numbers are prime, next prime generator: while !isPrime +=2
Word Break III: given str and dict, find ways to form sentences, 1d dp, can first find the longest length of the dict words
First Unique Number In Stream: LinkedList(Doubly Deque)+HashSet(Integer in LinkedList), if already in HashSet, remove in LinkedList,else append to LinkedList and add to HashSet
The Number In Words: number->natrual language word, below_20,below_100,hundred,thousand,million,billion(no need plural)
Two Sum IV - Input is a BST: inorder+hashset
Factorial: bigint mul(i+j,i+j+1, backward)+dp
Recover Binary Search Tree: inorder
Sliding Window Unique Elements Sum: the sum of the count of unique numbers in all windows, since treat count 0,1 as same, when adding new number, we should make uniqueNum++ when count is 1 or 2!
Course Schedule III: TSP O(2^n); sort by deadline, assume we have i courses with most number(mathematical induction), adding 1 and make its time shortest(max heap), this is greedy
Maximum Distance in Arrays: (mathematical induction) collect prevMin,prevMax and prevMaxDiff
Check Sum of K Primes: Goldbach https://www.geeksforgeeks.org/check-number-can-written-sum-k-prime-numbers/
Cutting a Rod: rod with price for each lengtheither dp[i] = max(dp[i], dp[j] + dp[i - j]); or dp[i] = max(dp[i], dp[j] + prices[i - j - 1]); is ok
